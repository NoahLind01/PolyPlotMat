classdef ProFileViewer_V5 < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigureMain              matlab.ui.Figure
        TabGroup                  matlab.ui.container.TabGroup
        MainPanel                 matlab.ui.container.Tab
        ColorPicker               matlab.ui.control.ColorPicker
        ColorPickerLabel          matlab.ui.control.Label
        AutoLoadWorkspace         matlab.ui.control.CheckBox
        LoadAlltoWorkspaceButton  matlab.ui.control.Button
        AutoscaleSwitch           matlab.ui.control.Switch
        LoadfromWorkspaceButton   matlab.ui.control.Button
        AutoScaleLabel            matlab.ui.control.Label
        ClearWorkspaceButton      matlab.ui.control.Button
        ClearfromWorkspaceButton  matlab.ui.control.Button
        WorkspaceDropDown         matlab.ui.control.DropDown
        WorkspaceDropDownLabel    matlab.ui.control.Label
        LoadtoWorkspaceButton     matlab.ui.control.Button
        MaxEditField              matlab.ui.control.NumericEditField
        MaxEditFieldLabel         matlab.ui.control.Label
        MinEditField              matlab.ui.control.NumericEditField
        MinEditFieldLabel         matlab.ui.control.Label
        ChannelDropDown           matlab.ui.control.DropDown
        ChannelLabel              matlab.ui.control.Label
        DirectoryFilesLabel       matlab.ui.control.Label
        MPDirectoryDropdown       matlab.ui.control.DropDown
        ChangeDirectoryButton     matlab.ui.control.Button
        MainPanelPlot             matlab.ui.control.UIAxes
        ComparisonPanel           matlab.ui.container.Tab
        XMinEditField             matlab.ui.control.NumericEditField
        XMinLabel                 matlab.ui.control.Label
        CtrlclickLabel            matlab.ui.control.Label
        ColorDropDown             matlab.ui.control.DropDown
        Y1MaxEditField            matlab.ui.control.NumericEditField
        Y1MaxEditFieldLabel       matlab.ui.control.Label
        Y1MinEditField            matlab.ui.control.NumericEditField
        Y1MinEditFieldLabel       matlab.ui.control.Label
        Y2MaxEditField            matlab.ui.control.NumericEditField
        Y2MaxEditFieldLabel       matlab.ui.control.Label
        Y2MinEditField            matlab.ui.control.NumericEditField
        Y2MinEditFieldLabel       matlab.ui.control.Label
        AutoscaleSwitch_2         matlab.ui.control.Switch
        AutoScaleLabel_2          matlab.ui.control.Label
        PlotSelectedButton        matlab.ui.control.Button
        CompChannelDropDown       matlab.ui.control.DropDown
        ChannelDropDown_2Label    matlab.ui.control.Label
        CompListBox               matlab.ui.control.ListBox
        WorkspaceLabel            matlab.ui.control.Label
        CompColorPicker           matlab.ui.control.ColorPicker
        ColorLabel                matlab.ui.control.Label
        CompPlotPanel             matlab.ui.control.UIAxes
        AnalysisPanel             matlab.ui.container.Tab
        AllFluoroSwitch           matlab.ui.control.Switch
        AllFluoroSwitchLabel      matlab.ui.control.Label
        ExportCSVButton           matlab.ui.control.Button
        APTable                   matlab.ui.control.Table
        ClearSelectionButton      matlab.ui.control.Button
        AUCResult                 matlab.ui.control.Label
        CalculateAUCButton        matlab.ui.control.Button
        SelectPoints              matlab.ui.control.Button
        ChannelDropDown_2         matlab.ui.control.DropDown
        ChannelDropDown_2Label_2  matlab.ui.control.Label
        APWorkspaceDropDown       matlab.ui.control.DropDown
        WorkspaceDropDown_2Label  matlab.ui.control.Label
        APPlot                    matlab.ui.control.UIAxes
    end

    
    properties (Access = private)
    % Data storage and state management
    workspace = {};           % Cell array to store trimmed data tables
    currFile                  % Current trimmed file data
    currFilePath              % Path to current file
    
    % Analysis properties
    selectedPoints = []       % Points selected for AUC calculation
    AUCValues = []            % Area under curve values for selected regions
    RelativeAbundanceValues = [] % Calculated relative abundance percentages
    highlightPatch            % Reference to visualization highlighting
end

methods (Access = private)
    %% File and Directory Management
    
    function listing = changeDirectory(~, shouldChange)
        % Changes working directory and returns CSV files in the directory
        % 
        % Parameters:
        %   shouldChange - Boolean indicating whether to prompt for directory change
        %
        % Returns:
        %   listing - Cell array of CSV filenames in the directory
        
        if shouldChange
            newDir = uigetdir;
            if newDir ~= 0  % User didn't cancel
                cd(newDir);
            end
        end
        
        dirStruct = dir('*.csv');
        listing = {dirStruct.name};
    end
    
    function trimmedFile = trimFile(~, inputFile)
        % Reads CSV file and trims to relevant data rows
        %
        % Parameters:
        %   inputFile - Path to CSV file
        %
        % Returns:
        %   trimmedFile - MATLAB table with relevant data
        
        data = readtable(inputFile);
        startRow = find(strcmp(data.Properties.VariableNames, 'SampleA'));
        
        if ~isempty(startRow)
            trimmedFile = data(startRow:end, :);
        else
            trimmedFile = data;
        end
    end
    
    %% Plotting and Visualization
    
    function newAxis = autoScalePlot(~, xData, yData)
        % Calculates optimal Y-axis limits for plot based on data
        %
        % Parameters:
        %   xData - X coordinates of data
        %   yData - Y coordinates of data
        %
        % Returns:
        %   newAxis - 2-element vector [yMin, yMax] for Y-axis limits
        
        if isempty(xData) || isempty(yData)
            newAxis = [0, 1];
            return;
        end
        
        % Focus on right 60% of data for auto-scaling
        xThreshold = 0.4 * max(xData);
        validIndices = xData >= xThreshold & xData <= max(xData);
        
        if ~any(validIndices)
            newAxis = [min(yData), max(yData)];
        else
            yInRange = yData(validIndices);
            yMax = max(yInRange);
            yMin = min(yInRange);
            
            % Add some padding to make plot look better
            newYMax = 1.25 * yMax;
            newYMin = min(0, yMin * 1.1);  % Ensure negative values are visible
            newAxis = [newYMin, newYMax];
        end
    end
    
    function plotMain(app, selectedFile, channel, isFilePath)
        % Plots data on the main panel
        %
        % Parameters:
        %   selectedFile - File name or data to plot
        %   channel - Channel name to plot (or "Default" to auto-select)
        %   isFilePath - Boolean indicating if selectedFile is a path
        
        % Load file data if needed
        if isFilePath
            app.currFilePath = fullfile(selectedFile);
            app.currFile = app.trimFile(app.currFilePath);
        else
            app.currFile = selectedFile;
        end
        
        % Update available channels in dropdown
        app.ChannelDropDown.Items = app.currFile.Properties.VariableNames;
        
        % Select appropriate channel if default requested
        if strcmp(channel, "Default")
            channel = app.getDefaultChannel(app.ChannelDropDown.Items, {'AbsA', 'Absorbance'});
        end
        app.ChannelDropDown.Value = channel;
        
        % Get x-axis data
        x = app.getPositionData(app.currFile);
        
        % Extract y-axis data for selected channel
        y = app.currFile.(channel);
        
        % Plot the data
        plot(app.MainPanelPlot, x, y, '-k');
        
        % Set axis labels and title
        xlabel(app.MainPanelPlot, 'Distance');
        ylabel(app.MainPanelPlot, channel);
        title(app.MainPanelPlot, ['Data from ', strrep(app.currFilePath, '_', ' ')]);
        
        % Apply autoscaling if enabled
        if strcmp(app.AutoscaleSwitch.Value, "On")
            newAxis = app.autoScalePlot(x, y);
            app.MainPanelPlot.YLim = newAxis;
        end
    end
    
    function plotComparisonFiles(app, indices, channels)
        % Plots multiple files for comparison on the comparison panel
        %
        % Parameters:
        %   indices - Cell array of file names to plot
        %   channels - Channel to plot
        
        % Reset plot and prepare for multi-plotting
        cla(app.CompPlotPanel, 'reset');
        hold(app.CompPlotPanel, 'on');
        yyaxis(app.CompPlotPanel, 'left');
        
        legendItems = {};
        y_all = [];
        
        % Plot each selected file
        for i = 1:length(indices)
            % Find file in workspace
            index = find(strcmp(app.workspace(:,1), [indices{i}, '.csv']));
            if isempty(index), continue; end
            
            data = app.workspace{index, 2};
            
            % Get position data
            try
                x = app.getPositionData(data);
            catch
                continue;
            end
            
            % Get appropriate y data based on channel type
            try
                y = app.getChannelData(data, channels);
                if isempty(y), continue; end
            catch
                continue;
            end
            
            % Plot on appropriate axis based on channel type
            app.plotOnAppropriateAxis(app.CompPlotPanel, channels, x, y);
            
            % Add to legend and collect y values for scaling
            legendItems{end+1} = strrep(indices{i}, '_', ' ');
            y_all = [y_all; y];
        end
        
        % Apply autoscaling or manual limits
        app.applyAxisLimits(app.CompPlotPanel, x, y_all);
        
        % Set up plot formatting
        app.formatComparisonPlot(app.CompPlotPanel, channels, legendItems);
    end
    
    function plotWorkspaceFiles(app, selectedFile, channel, plotName)
        % Plots data from workspace on the analysis panel
        %
        % Parameters:
        %   selectedFile - Data table to plot
        %   channel - Channel name to plot
        %   plotName - Name to show in plot title
        
        % Update channel dropdown with available channels
        availableChannels = selectedFile.Properties.VariableNames;
        app.ChannelDropDown_2.Items = availableChannels;
        
        % Select appropriate channel if default requested
        if strcmp(channel, "Default")
            channel = app.getDefaultChannel(availableChannels, {'AbsA', 'Absorbance'});
        end
        
        % Verify that the selected channel exists in the dropdown items
        % and if not, select the first available channel
        if ~ismember(channel, availableChannels)
            fprintf('Warning: Selected channel "%s" not found in dataset. Using first available channel.\n', channel);
            if ~isempty(availableChannels)
                channel = availableChannels{1};
            else
                error('No channels available in the data');
            end
        end
        
        % Set dropdown value to the validated channel
        app.ChannelDropDown_2.Value = channel;
        
        % Get position data for x-axis
        try
            x = app.getPositionData(selectedFile);
        catch e
            errordlg(['Error getting position data: ', e.message], 'Data Error');
            return;
        end
        
        % Get y-axis data
        y = selectedFile.(channel);
        
        % Plot the data
        plot(app.APPlot, x, y, '-k');
        
        % Set labels and title
        xlabel(app.APPlot, 'Distance');
        ylabel(app.APPlot, channel);
        title(app.APPlot, ['Data from ', strrep(plotName, '_', ' ')]);
        
        % Apply autoscaling if enabled
        if strcmp(app.AutoscaleSwitch.Value, "On")
            newAxis = app.autoScalePlot(x,y);
            app.APPlot.YLim = newAxis;
        end
    end
    
    %% Analysis Methods
    
    function selectPointsOnPlot(app, ~, ~)
        % Enables point selection on the analysis plot
        
        [x, y] = getpts(app.APPlot);
        app.selectedPoints = [x, y];
        
        % Mark selected points on the plot
        hold(app.APPlot, 'on');
        plot(app.APPlot, x, y, 'ro', 'MarkerSize', 10);
        hold(app.APPlot, 'off');
    end
    
    function calculateAreaUnderCurve(app)
        % Calculates area under curve for absorbance and all fluorescence channels
        
        if numel(app.selectedPoints) < 2
            warndlg('Please select at least two points.', 'Warning');
            return;
        end
        
        x_selected = app.selectedPoints(:,1);
        
        % Get the current file data from workspace
        value = app.APWorkspaceDropDown.Value;
        if strcmp(value, "No Data")
            warndlg('No data selected for analysis.', 'Warning');
            return;
        end
        
        selectedIndex = find(strcmp(app.workspace(:,1), [value, '.csv']));
        if isempty(selectedIndex)
            warndlg('Selected file not found in workspace.', 'Warning');
            return;
        end
        
        selectedFile = app.workspace{selectedIndex, 2};
        
        % Get position data for analysis
        try
            x_data = app.getPositionData(selectedFile);
        catch
            warndlg('Could not find position data.', 'Warning');
            return;
        end
        
        % Find absorbance channel
        absChannel = '';
        if ismember('AbsA', selectedFile.Properties.VariableNames)
            absChannel = 'AbsA';
        elseif ismember('Absorbance', selectedFile.Properties.VariableNames)
            absChannel = 'Absorbance';
        end
        
        % Find all fluorescence channels
        fluoroChannels = struct();
        fluoroTypes = {'SampleFluorA', 'SampleFluorB', 'Fluorescence'};
        
        for i = 1:length(fluoroTypes)
            if ismember(fluoroTypes{i}, selectedFile.Properties.VariableNames)
                % Use the fluorescence type as a field name (sanitize if needed)
                fieldName = strrep(fluoroTypes{i}, 'Sample', '');
                fluoroChannels.(fieldName) = fluoroTypes{i};
            end
        end
        
        % Initialize results structure
        app.AUCValues = struct('absorbance', []);
        app.RelativeAbundanceValues = struct('absorbance', []);
        
        % Calculate AUC for absorbance if available
        if ~isempty(absChannel)
            absAUC = app.calculateChannelAUC(x_data, selectedFile.(absChannel), x_selected, false);
            app.AUCValues.absorbance = absAUC;
            fprintf('Absorbance AUC calculated from %s channel\n', absChannel);
        end
        
        % Calculate AUC for each fluorescence channel
        fluoroFields = fieldnames(fluoroChannels);
        if ~isempty(fluoroFields)
            for i = 1:length(fluoroFields)
                fieldName = fluoroFields{i};
                channelName = fluoroChannels.(fieldName);
                
                fluoroAUC = app.calculateChannelAUC(x_data, selectedFile.(channelName), x_selected, app.AllFluoroSwitch.Value == "On");
                app.AUCValues.(fieldName) = fluoroAUC;
                fprintf('Fluorescence AUC calculated from %s channel\n', channelName);
            end
        end
        
        % Build result text
        resultParts = {};
        
        % Add absorbance result if available
        if ~isempty(absChannel) && isfield(app.AUCValues, 'absorbance') && ~isempty(app.AUCValues.absorbance)
            absTotal = sum(app.AUCValues.absorbance);
            resultParts{end+1} = sprintf('Abs: %.4f', absTotal);
        end
        
        % Add each fluorescence channel result
        for i = 1:length(fluoroFields)
            fieldName = fluoroFields{i};
            if isfield(app.AUCValues, fieldName) && ~isempty(app.AUCValues.(fieldName))
                fluoroTotal = sum(app.AUCValues.(fieldName));
                resultParts{end+1} = sprintf('%s: %.4f', fieldName, fluoroTotal);
            end
        end
        
        % Combine all results
        app.AUCResult.Text = strjoin(resultParts, ' | ');
        
        % Calculate relative abundances
        app.calculateRelativeAbundance();
        
        % Update table with all values
        app.updateAPTable();
        
        % Highlight the selected region
        app.highlightSelectedRegion();
    end
    
    function calculateRelativeAbundance(app)
        % Calculates relative percentage of each segment for all channels
        
        if isempty(app.AUCValues)
            warndlg('Please calculate AUC first.', 'Warning');
            return;
        end
        
        % Get all field names from AUCValues
        channelFields = fieldnames(app.AUCValues);
        
        % Calculate relative abundance for each channel
        for i = 1:length(channelFields)
            fieldName = channelFields{i};
            
            if isfield(app.AUCValues, fieldName) && ~isempty(app.AUCValues.(fieldName))
                channelAUC = app.AUCValues.(fieldName);
                totalChannelAUC = sum(channelAUC);
                
                if totalChannelAUC <= 0 || isnan(totalChannelAUC)
                    app.RelativeAbundanceValues.(fieldName) = [];
                    fprintf('Cannot calculate %s relative abundance - invalid total\n', fieldName);
                else
                    app.RelativeAbundanceValues.(fieldName) = (channelAUC ./ totalChannelAUC) * 100;
                    fprintf('%s relative abundances calculated\n', fieldName);
                end
            end
        end
    end
    
    function highlightSelectedRegion(app)
        % Highlights the region between selected points on the plot
        
        if numel(app.selectedPoints) < 2
            return;
        end
        
        x_selected = app.selectedPoints(:,1);
        
        % Get all lines from the plot (not just those without markers)
        plotLines = findobj(app.APPlot, 'Type', 'line');
        
        % Filter to get only the main data line (typically without markers)
        % but fall back to any line if needed
        dataLine = [];
        for i = 1:length(plotLines)
            if strcmp(plotLines(i).Marker, 'none')
                dataLine = plotLines(i);
                break;
            end
        end
        
        % If we still don't have a data line, use the first line found
        if isempty(dataLine) && ~isempty(plotLines)
            dataLine = plotLines(1);
        end
        
        if isempty(dataLine)
            warning('No data line found to highlight');
            return;
        end
        
        % Safely extract plot data
        try
            xData = dataLine.XData;
            yData = dataLine.YData;
        catch e
            warning('Could not access data from plot: %s', e.message);
            return;
        end
        
        % Find region boundaries
        xMin = min(x_selected);
        xMax = max(x_selected);
        
        % Find indices within the selection range
        idx_within_range = find(xData >= xMin & xData <= xMax);
        
        if isempty(idx_within_range)
            warning('No data points found within selected range');
            return;
        end
        
        idx_start = min(idx_within_range);
        idx_end = max(idx_within_range);
        
        % Get data within selection range
        x_highlight = xData(idx_start:idx_end);
        y_highlight = yData(idx_start:idx_end);
        
        % Choose appropriate color based on current channel
        currentChannel = app.ChannelDropDown_2.Value;
        fluoroChannels = {'Fluorescence', 'SampleFluorA', 'SampleFluorB'};
        isFluoroChannel = any(strcmp(currentChannel, fluoroChannels));
        
        if isFluoroChannel
            highlightColor = [0.2, 0.6, 0.8];  % Blue for fluorescence
            alpha = 0.25;
        else
            highlightColor = [0.8, 0.2, 0.2];  % Red for absorbance
            alpha = 0.3;
        end
        
        y_min = min(min(yData), 0);
        
        % Create or update highlight patch
        hold(app.APPlot, 'on');
        if isfield(app, 'highlightPatch') && isgraphics(app.highlightPatch)
            delete(app.highlightPatch);
        end
        
        try
            app.highlightPatch = fill(app.APPlot, ...
                [x_highlight; flipud(x_highlight)], ...
                [y_highlight; repmat(y_min, size(y_highlight))], ...
                highlightColor, 'FaceAlpha', alpha);
            
            % Add vertical lines at selected points
            for i = 1:length(x_selected)
                line(app.APPlot, [x_selected(i), x_selected(i)], app.APPlot.YLim, ...
                    'Color', [0.5, 0.5, 0.5], 'LineStyle', '--', 'LineWidth', 1);
            end
        catch e
            warning('Error creating highlight patch: %s', e.message);
        end
        
        hold(app.APPlot, 'off');
    end
    
    function updateAPTable(app)
        % Updates the analysis table with AUC and relative abundance for all channels
        
        if isempty(app.AUCValues)
            return;
        end
        
        % Get all channel fields
        channelFields = fieldnames(app.AUCValues);
        if isempty(channelFields)
            return;
        end
        
        % Determine max number of segments across all channels
        numSegments = 0;
        for i = 1:length(channelFields)
            fieldName = channelFields{i};
            if isfield(app.AUCValues, fieldName) && ~isempty(app.AUCValues.(fieldName))
                numSegments = max(numSegments, length(app.AUCValues.(fieldName)));
            end
        end
        
        if numSegments == 0
            return;
        end
        
        % Create segment numbers
        segmentNumbers = (1:numSegments)';
        
        % Initialize data cell array
        data = num2cell(segmentNumbers);
        columnNames = {'Segment'};
        
        % Add data for each channel (AUC and relative abundance)
        for i = 1:length(channelFields)
            fieldName = channelFields{i};
            
            if isfield(app.AUCValues, fieldName) && ~isempty(app.AUCValues.(fieldName))
                % Prepare AUC values
                channelAUC = nan(numSegments, 1);
                aucLength = length(app.AUCValues.(fieldName));
                channelAUC(1:aucLength) = app.AUCValues.(fieldName)';
                
                % Add AUC column
                data = [data, num2cell(channelAUC)];
                
                % Create appropriate column name based on channel
                if strcmp(fieldName, 'absorbance')
                    columnNames{end+1} = 'Abs AUC';
                else
                    columnNames{end+1} = [fieldName ' AUC'];
                end
                
                % Prepare relative abundance values if available
                if isfield(app.RelativeAbundanceValues, fieldName) && ~isempty(app.RelativeAbundanceValues.(fieldName))
                    relAbValues = nan(numSegments, 1);
                    relAbLength = length(app.RelativeAbundanceValues.(fieldName));
                    relAbValues(1:relAbLength) = app.RelativeAbundanceValues.(fieldName)';
                    
                    % Add relative abundance column
                    data = [data, num2cell(relAbValues)];
                    
                    % Create appropriate column name
                    if strcmp(fieldName, 'absorbance')
                        columnNames{end+1} = 'Abs %';
                    else
                        columnNames{end+1} = [fieldName ' %'];
                    end
                end
            end
        end
        
        % Update table
        app.APTable.Data = data;
        app.APTable.ColumnName = columnNames;
    end
    
    %% Utility Methods
    
    function channel = getDefaultChannel(~, availableChannels, preferredChannels)
        % Selects a default channel based on preferences
        %
        % Parameters:
        %   availableChannels - List of available channels
        %   preferredChannels - Ordered list of preferred channel names
        %
        % Returns:
        %   channel - Selected channel name
        
        for i = 1:length(preferredChannels)
            if any(strcmp(availableChannels, preferredChannels{i}))
                channel = preferredChannels{i};
                return;
            end
        end
        
        % If no preferred channel found, use first available
        if ~isempty(availableChannels)
            channel = availableChannels{1};
        else
            error('No channels available in data');
        end
    end
    
    function positionData = getPositionData(~, dataTable)
        % Extracts position data from table
        %
        % Parameters:
        %   dataTable - Table containing data
        %
        % Returns:
        %   positionData - Column vector with position values
        
        if ismember('Position', dataTable.Properties.VariableNames)
            positionData = dataTable.Position;
        elseif ismember('Position_mm_', dataTable.Properties.VariableNames)
            positionData = dataTable.("Position_mm_");
        else
            error('Position column not found in the data');
        end
    end
    
    function channelData = getChannelData(~, dataTable, channelType)
        % Extracts channel data based on channel type
        %
        % Parameters:
        %   dataTable - Table containing data
        %   channelType - Type of channel to extract
        %
        % Returns:
        %   channelData - Column vector with channel values
        
        if strcmp(channelType, 'Absorbance')
            if ismember('Absorbance', dataTable.Properties.VariableNames)
                channelData = dataTable.Absorbance;
            elseif ismember('AbsA', dataTable.Properties.VariableNames)
                channelData = dataTable.AbsA;
            else
                channelData = [];
            end
        elseif strcmp(channelType, 'Fluorescence')
            if ismember('Fluorescence', dataTable.Properties.VariableNames)
                channelData = dataTable.Fluorescence;
            elseif ismember('SampleFluorA', dataTable.Properties.VariableNames)
                channelData = dataTable.SampleFluorA;
            else
                channelData = [];
            end
        elseif strcmp(channelType, 'SampleFluorB')
            if ismember('SampleFluorB', dataTable.Properties.VariableNames)
                channelData = dataTable.SampleFluorB;
            else
                channelData = [];
            end
        else
            % Try direct access
            if ismember(channelType, dataTable.Properties.VariableNames)
                channelData = dataTable.(channelType);
            else
                channelData = [];
            end
        end
    end
    
    function plotOnAppropriateAxis(~, axesHandle, channelType, x, y)
        % Plots data on appropriate y-axis based on channel type
        %
        % Parameters:
        %   axesHandle - Handle to axes for plotting
        %   channelType - Type of data to plot
        %   x - X-axis data
        %   y - Y-axis data
        
        fluorChannels = {'Fluorescence', 'SampleFluorB', 'SampleFluorA'};
        if any(strcmp(channelType, fluorChannels))
            yyaxis(axesHandle, 'right');
        else
            yyaxis(axesHandle, 'left');
        end
        plot(axesHandle, x, y, '-');
    end
    
    function applyAxisLimits(app, axesHandle, x, y_all)
        % Applies appropriate axis limits to the plot
        %
        % Parameters:
        %   axesHandle - Handle to axes to adjust
        %   x - X-axis data
        %   y_all - All Y values for scaling
        
        if strcmp(app.AutoscaleSwitch_2.Value, "On")
            newAxis = app.autoScalePlot(x, y_all);
            axesHandle.YLim = newAxis;
        else
            minY = app.Y2MinEditField.Value;
            maxY = app.Y2MaxEditField.Value;
            if ~isnan(minY) && ~isnan(maxY) && minY < maxY
                axesHandle.YLim = [minY, maxY];
            end
        end
    end
    
    function formatComparisonPlot(~, axesHandle, channelType, legendItems)
        % Formats the comparison plot with labels and legend
        %
        % Parameters:
        %   axesHandle - Handle to axes to format
        %   channelType - Type of data being plotted
        %   legendItems - Items to include in legend
        
        hold(axesHandle, 'off');
        xlabel(axesHandle, 'Position');
        
        yyaxis(axesHandle, 'left');
        ylabel(axesHandle, 'Absorbance 260 nm');
        
        fluorChannels = {'SampleFluorA', 'SampleFluorB', 'SampleFluor', 'Fluorescence'};
        yyaxis(axesHandle, 'right');
        if any(strcmp(channelType, fluorChannels))
            ylabel(axesHandle, 'Fluorescence (AU)');
        else
            ylabel(axesHandle, '');
        end
        
        title(axesHandle, 'Comparison Plot');
        lgd = legend(axesHandle, legendItems);
        title(lgd, channelType);
    end
    
    function logAbundanceValues(~, aucValues, relAbundances, totalAUC)
        % Logs AUC and relative abundance values to console
        %
        % Parameters:
        %   aucValues - Array of AUC values
        %   relAbundances - Array of relative abundance percentages
        %   totalAUC - Total AUC value
        
        disp('AUC Values:');
        disp(aucValues);
        disp(['Total AUC: ', num2str(totalAUC)]);
        
        for i = 1:length(relAbundances)
            fprintf('Segment %d Relative Abundance: %.2f%%\n', i, relAbundances(i));
        end
    end

    function isFluorescenceChannel(~, channelName)
        % Determines whether a channel is a fluorescence channel
        %
        % Parameters:
        %   channelName - Name of the channel to check
        %
        % Returns:
        %   isFluro - Boolean indicating if channel is a fluorescence channel
        
        fluoroChannels = {'Fluorescence', 'SampleFluorA', 'SampleFluorB'};
        isFluoro = any(strcmp(channelName, fluoroChannels));
    end

    function aucValues = calculateChannelAUC(app, xData, yData, xSelected, applyBaselineCorrection)
        % Helper method to calculate AUC for a specific channel
        %
        % Parameters:
        %   xData - Full x-axis data
        %   yData - Full y-axis data
        %   xSelected - Selected x points for integration
        %   applyBaselineCorrection - Whether to apply baseline correction
        %
        % Returns:
        %   aucValues - Vector of AUC values for each segment
    
        % Clean data by removing duplicates
        [xData_unique, unique_indices] = unique(xData);
        yData_unique = yData(unique_indices);
        
        % Adjust baseline if needed and requested
        yMin = min(yData_unique);
        if yMin < 0 && applyBaselineCorrection
            yData_unique = yData_unique - yMin;
            fprintf('Applied baseline correction: %f\n', yMin);
        end
        
        % Interpolate y values for selected x points
        y_interp = interp1(xData_unique, yData_unique, xSelected, 'linear', 'extrap');
        
        % Sort points by x value to ensure correct segment calculation
        [x_sorted, sort_idx] = sort(xSelected);
        y_sorted = y_interp(sort_idx);
        
        % Calculate AUC for each segment
        numSegments = length(x_sorted)-1;
        aucValues = zeros(1, numSegments);
        
        for i = 1:numSegments
            segment_x = x_sorted(i:i+1);
            segment_y = y_sorted(i:i+1);
            aucValues(i) = trapz(segment_x, segment_y);
        end
    end
end

    % Callbacks that handle component events
    methods (Access = private)

        % Code that executes after component creation
        function startupFcn(app)
            % make Mainpanel visible but others invisible
            clc
            
            items = app.changeDirectory(false);
            if ~isempty(items)
                app.MPDirectoryDropdown.Items = items;
            end
            
            % Initialize data structures for dual-channel analysis
            app.AUCValues = struct('absorbance', [], 'fluorescence', []);
            app.RelativeAbundanceValues = struct('absorbance', [], 'fluorescence', []);
            % Initialize data structures for multi-channel analysis
            app.AUCValues = struct();
            app.RelativeAbundanceValues = struct();
            
        end

        % Button pushed function: ChangeDirectoryButton
        function ChangeDirectoryButtonPushed(app, event)
            % ask user to set the directory and return what's in it
            items = app.changeDirectory(true);
            if ~isempty(items)
                app.MPDirectoryDropdown.Items = items;
            end
        end

        % Value changed function: MPDirectoryDropdown
        function MPDirectoryDropdownValueChanged(app, event)
            % set the new file active to whatever selected by the dropdown
            selectedFile = app.MPDirectoryDropdown.Value;
            if ~strcmp(selectedFile, 'No Data')
                app.plotMain(selectedFile, "Default", true)
            else
                % shouldn't ever be able to select no data but just in case
                warning('No file selected or available.');
            end
            
        end

        % Value changed function: ChannelDropDown
        function ChannelDropDownValueChanged(app, event)
            selectedChannel = app.ChannelDropDown.Value;
    
            % Ensure current file data is available
            if ~isempty(app.currFilePath)
                
                % plot the current display with the new selected channel
                app.plotMain(app.currFilePath, selectedChannel, true);
                
            else
                % Handle case when no file is loaded - RARE case
                warning('No file data available to plot.');
            end
            
        end

        % Value changed function: MinEditField
        function MinEditFieldValueChanged(app, event)
            value = app.MinEditField.Value;
        
            % check to see if input is valid then set min axis
            if ~isnan(value) && isreal(value) && value < app.MainPanelPlot.YLim(2)
                app.MainPanelPlot.YLim = [value, app.MainPanelPlot.YLim(2)];
            end    
        end

        % Value changed function: MaxEditField
        function MaxEditFieldValueChanged(app, event)
            value = app.MaxEditField.Value;
            
            % check to see if input is valid then set max axis
            if ~isnan(value) && isreal(value) && value > app.MainPanelPlot.YLim(1)
                app.MainPanelPlot.YLim = [app.MainPanelPlot.YLim(1), value];
            end
        end

        % Button pushed function: LoadtoWorkspaceButton
        function LoadtoWorkspaceButtonPushed(app, event)
            % Add trimmedData to workspace
            if ~isempty(app.currFilePath) || ~isempty(app.currFile)
                if isempty(app.workspace)
                    % Initialize workspace if empty
                    app.workspace = {app.currFilePath, app.currFile};
                else
                    % Add new row to workspace
                    app.workspace(end+1,:) = {app.currFilePath, app.currFile};
                end 
            end
            
            if ~isempty(app.currFilePath)
                % Extract filename from path
                [~, filename, ~] = fileparts(app.currFilePath);
            
                if ~ismember(filename, app.WorkspaceDropDown.Items)
                    if ismember('No Data', app.WorkspaceDropDown.Items)
                        % Replace 'No Data' with first actual filename
                        app.WorkspaceDropDown.Items = {filename};
                    else
                        % Append new filename to dropdown list
                        app.WorkspaceDropDown.Items = [app.WorkspaceDropDown.Items, {filename}];
                        
                    end
                end
            end
            
            
            %disp(app.workspace)
        end

        % Value changed function: AutoscaleSwitch
        function AutoscaleSwitchValueChanged(app, event)
            value = app.AutoscaleSwitch.Value;
            
        end

        % Button pushed function: LoadfromWorkspaceButton
        function LoadfromWorkspaceButtonPushed(app, event)
            if app.WorkspaceDropDown.Value ~= "No Data"
                % in workspace, use the selection name to get the appropriate
                % trimmed-off data
                selection = [app.WorkspaceDropDown.Value, '.csv'];
    
                % select the appropriate file in the workspace
                selectedIndex = find(strcmp(app.workspace(:,1), selection));
                if ~isempty(selectedIndex)
                    selectedFile = app.workspace{selectedIndex, 2};
                    app.currFilePath = selection;
                end
                
                % plot the current display with the new selected channel
                app.plotMain(selectedFile, "Default", false);
                
            end
        end

        % Button pushed function: ClearfromWorkspaceButton
        function ClearfromWorkspaceButtonPushed(app, event)
            if ~strcmp(app.WorkspaceDropDown.Value, "No Data")
                selection = [app.WorkspaceDropDown.Value, '.csv'];
                
                % Find and remove item from WorkspaceDropDown
                ddindex = find(strcmp(app.WorkspaceDropDown.Items, app.WorkspaceDropDown.Value));
                app.WorkspaceDropDown.Items(ddindex) = [];
                
                % Remove from workspace
                selectedIndex = find(strcmp(app.workspace(:,1), selection));
                app.workspace(selectedIndex, :) = [];
                
                % Update dropdown value if items remain
                if ~isempty(app.WorkspaceDropDown.Items)
                    app.WorkspaceDropDown.Value = app.WorkspaceDropDown.Items{1};
                else
                    app.WorkspaceDropDown.Items = {'No Data'};
                    app.WorkspaceDropDown.Value = 'No Data';
                end
            end
        end

        % Button pushed function: ClearWorkspaceButton
        function ClearWorkspaceButtonPushed(app, event)
            % wipe the whole workspace
            app.WorkspaceDropDown.Items = "No Data";
            app.workspace = {};
        end

        % Button pushed function: LoadAlltoWorkspaceButton
        function LoadAlltoWorkspaceButtonPushed(app, event)
            % Get list of files from dropdown
            files = app.MPDirectoryDropdown.Items;
            % disp(files)  % Display files for debugging
            
            % Iterate through each file
            for i = 1:length(files)
                if ~strcmp(files{i}, 'No Data')  % Skip 'No Data' entry
                    filePath = fullfile(pwd, files{i});  % Construct full file path
                    trimmedFile = app.trimFile(filePath);  % Trim file data
                    
                    % Add file to workspace
                    if isempty(app.workspace)
                        app.workspace = {files{i}, trimmedFile};  % Initialize workspace
                    else
                        app.workspace(end+1,:) = {files{i}, trimmedFile};  % Add new row
                    end
                    
                    % Update WorkspaceDropDown
                    [~, filename, ~] = fileparts(filePath);
                    if ~ismember(filename, app.WorkspaceDropDown.Items)
                        if ismember('No Data', app.WorkspaceDropDown.Items)
                            app.WorkspaceDropDown.Items = {filename};  % Replace 'No Data'
                        else
                            app.WorkspaceDropDown.Items = [app.WorkspaceDropDown.Items, {filename}];  % Append filename
                        end
                    end
                end
            end
            
            % disp(app.workspace) % debug
        end

        % Value changed function: WorkspaceDropDown
        function WorkspaceDropDownValueChanged(app, event)
            if app.AutoLoadWorkspace.Value
                LoadfromWorkspaceButtonPushed(app, matlab.ui.eventdata.ButtonPushedData)
            end
        end

        % Callback function: ColorPicker
        function ColorPickerValueChanged(app, event)
            value = app.ColorPicker.Value;
            if ~isempty(app.MainPanelPlot.Children)
                app.MainPanelPlot.Children.Color = value;
            end
        end

        % Button down function: ComparisonPanel
        function ComparisonPanelButtonDown(app, event)
            % add/subtract data to/from compworkspace too
            app.CompListBox.Items = app.WorkspaceDropDown.Items;
        end

        % Button down function: MainPanel
        function MainPanelButtonDown(app, event)
            % add/subtract data to/from compworkspace too
            %app.WorkspaceDropDown.Items = app.CompListBox.Items;
        end

        % Callback function: CompListBox, CompListBox
        function CompListBoxClicked(app, event)
            selectedIndices = app.CompListBox.Value;
            allChannels = {};
        
            if ~isempty(selectedIndices) && selectedIndices{1} ~= "No Data"
                for i = 1:numel(selectedIndices)
                    selectedIndex = find(strcmp(app.workspace(:,1), [selectedIndices{i},'.csv']));
                    if ~isempty(selectedIndex)
                        fileChannels = app.workspace{selectedIndex, 2}.Properties.VariableNames;
                        fileChannels = replace(fileChannels, {'AbsA', 'Absorbance'}, 'Absorbance');
                        fileChannels = replace(fileChannels, 'Fluorescence', 'SampleFluorA');
                        allChannels = union(allChannels, fileChannels);
                    end
                end
        
                app.CompChannelDropDown.Items = allChannels;
                if ~isempty(allChannels)
                    app.CompChannelDropDown.Value = allChannels{1};
                else
                    app.CompChannelDropDown.Value = '';
                end 
            end

            
        end

        % Button pushed function: PlotSelectedButton
        function PlotSelectedButtonPushed(app, event)
            % plot the files selected - make sure data exists to plot first
            if ~isempty(app.CompListBox.Value) && all(~strcmp(app.CompListBox.Value, "No Data")) ... 
                    && ~strcmp(app.CompChannelDropDown.Value, "No Data")
                
                app.plotComparisonFiles(app.CompListBox.Value, app.CompChannelDropDown.Value)
                app.ColorDropDown.Items = app.CompListBox.Value;
            end
        end

        % Value changed function: Y2MinEditField
        function Y2MinEditFieldValueChanged(app, event)
            value = app.Y2MinEditField.Value;
            if ~isnan(value) && isreal(value) && value < app.Y2MaxEditField.Value
                yyaxis(app.CompPlotPanel, 'right');
                ylim(app.CompPlotPanel, [value, app.CompPlotPanel.YLim(2)]);
            end
            
        end

        % Value changed function: Y2MaxEditField
        function Y2MaxEditFieldValueChanged(app, event)
            value = app.Y2MaxEditField.Value;
            if ~isnan(value) && isreal(value) && value > app.Y2MinEditField.Value
                yyaxis(app.CompPlotPanel, 'right');
                ylim(app.CompPlotPanel, [app.CompPlotPanel.YLim(1), value]);
            end
        end

        % Value changed function: Y1MinEditField
        function Y1MinEditFieldValueChanged(app, event)
            value = app.Y1MinEditField.Value;
            if ~isnan(value) && isreal(value) && value < app.Y1MaxEditField.Value
                yyaxis(app.CompPlotPanel, 'left');
                ylim(app.CompPlotPanel, [value, app.CompPlotPanel.YLim(2)]);
            end
        end

        % Value changed function: Y1MaxEditField
        function Y1MaxEditFieldValueChanged(app, event)
            value = app.Y1MaxEditField.Value;
            if ~isnan(value) && isreal(value) && value > app.Y1MinEditField.Value
                yyaxis(app.CompPlotPanel, 'left');
                ylim(app.CompPlotPanel, [app.CompPlotPanel.YLim(1), value]);
            end

        end

        % Callback function: CompColorPicker
        function CompColorPickerValueChanged(app, event)
            % get the new color and the selected line
            newColor = app.CompColorPicker.Value;
            selectedLine = [strrep(app.ColorDropDown.Value, "_", " ")];
            % disp(selectedLine)

            % find out what is inside the CompPlotPanel
            lineObj = findobj(app.CompPlotPanel, 'Type', 'Line', 'DisplayName', selectedLine);
        
            % if something is graphed, set the specified line to that color
            if ~isempty(lineObj)
                % set(lineObj, 'Color', newColor);
                lineObj.Color = newColor;
            else
                warning('Selected line not found.');
            end
            
        end

        % Value changed function: XMinEditField
        function XMinEditFieldValueChanged(app, event)
            value = app.XMinEditField.Value;
            selectedLine = [strrep(app.ColorDropDown.Value, "_", " ")];
            lineObj = findobj(app.CompPlotPanel, 'Type', 'Line', 'DisplayName', selectedLine);

            if ~isempty(lineObj)
                % Get the original data source
                originalXData = lineObj.XData;
                originalYData = lineObj.YData;

                % Filter the data based on the new x-minimum value
                newXData = originalXData(originalXData >= value) - value;
                newYData = originalYData(originalXData >= value);

                % Update the data source and refresh the plot
                lineObj.XData = newXData;
                lineObj.YData = newYData;

                % Redraw the plot, keeping the previous y-axis limits
                app.CompPlotPanel.XLim = [0, max(newXData)];
                drawnow;
            else
                warning('Selected line not found.');
            end
        end

        % Button down function: AnalysisPanel
        function AnalysisPanelButtonDown(app, event)
            % add/subtract data to/from compworkspace too
            app.APWorkspaceDropDown.Items = app.WorkspaceDropDown.Items;

            value = app.APWorkspaceDropDown.Value;

            if ~strcmp(value, "No Data")
                % Find the corresponding index in the workspace
                selectedIndex = find(strcmp(app.workspace(:,1), [value, '.csv']));

                if ~isempty(selectedIndex)
                    % Get the selected file data
                    selectedFile = app.workspace{selectedIndex, 2};
                    % display(selectedFile)


                    if app.ChannelDropDown_2.Value ~= "No Data"
                    % Plot the selected file using plotWorkspaceFiles
                        plotWorkspaceFiles(app, selectedFile, app.ChannelDropDown_2.Value, app.workspace{selectedIndex, 1});
                    else
                        plotWorkspaceFiles(app, selectedFile, "Default", app.workspace{selectedIndex, 1});
                        disp("default triggered")

                    end
                end
            end
        end

        % Value changed function: ChannelDropDown_2
        function ChannelDropDown_2ValueChanged(app, event)
           value = app.APWorkspaceDropDown.Value;
    
            if ~strcmp(value, "No Data")
                % Find the corresponding index in the workspace
                selectedIndex = find(strcmp(app.workspace(:,1), [value, '.csv']));

                if ~isempty(selectedIndex)
                    % Get the selected file data
                    selectedFile = app.workspace{selectedIndex, 2};
                    % display(selectedFile)


                    if app.ChannelDropDown_2.Value ~= "No Data"
                    % Plot the selected file using plotWorkspaceFiles
                        plotWorkspaceFiles(app, selectedFile, app.ChannelDropDown_2.Value, app.workspace{selectedIndex, 1});
                    else
                        plotWorkspaceFiles(app, selectedFile, "Default", app.workspace{selectedIndex, 1});
                        disp("default triggered")

                    end
                end
            end
        end

        % Value changed function: APWorkspaceDropDown
        function APWorkspaceDropDownValueChanged(app, event)
            value = app.APWorkspaceDropDown.Value;
    
            if ~strcmp(value, "No Data")
                % Find the corresponding index in the workspace
                selectedIndex = find(strcmp(app.workspace(:,1), [value, '.csv']));

                if ~isempty(selectedIndex)
                    % Get the selected file data
                    selectedFile = app.workspace{selectedIndex, 2};
                    % display(selectedFile)


                    if app.ChannelDropDown_2.Value ~= "No Data"
                    % Plot the selected file using plotWorkspaceFiles
                        plotWorkspaceFiles(app, selectedFile, app.ChannelDropDown_2.Value, app.workspace{selectedIndex, 1});
                    else
                        plotWorkspaceFiles(app, selectedFile, "Default", app.workspace{selectedIndex, 1});
                        disp("default triggered")

                    end
                end
            end
        end

        % Button pushed function: SelectPoints
        function SelectPointsButtonPushed(app, event)
            % Enable interactivity on the plot
            app.APPlot.ButtonDownFcn = @(src,evt)selectPointsOnPlot(app, src, evt);
            
            % Initialize the selected points data structure
            app.selectedPoints = [];
            %~~~~~~~~~~~~~~~~~~
            
        end

        % Button pushed function: CalculateAUCButton
        function CalculateAUCButtonPushed(app, event)
            % Calculate AUC values
            calculateAreaUnderCurve(app);
            
            % Highlight the selected regions on the plot
            highlightSelectedRegion(app);
            
            % No need for this line anymore as calculateAreaUnderCurve now directly updates app.AUCValues
            % app.AUCValues(end+1) = str2double(app.AUCResult.Text(6:end)); 
            
            % Calculate relative abundance percentages
            calculateRelativeAbundance(app);
            
            % Update the table with the results
            updateAPTable(app);
        end

        % Button pushed function: ClearSelectionButton
        function ClearSelectionButtonPushed(app, event)
        % Clear highlighted patches
        if isfield(app, 'highlightPatch') && isgraphics(app.highlightPatch)
            delete(app.highlightPatch);
        end
        
        % Clear selected points
        if ~isempty(app.selectedPoints)
            app.selectedPoints = [];
        end
        
        % Reset AUC values
        app.AUCValues = struct();
        app.RelativeAbundanceValues = struct();
        
        % Remove point markers and highlight lines
        delete(findobj(app.APPlot, 'Type', 'line', 'Marker', 'o'));
        delete(findobj(app.APPlot, 'LineStyle', '--'));
        
        % Reset result display
        app.AUCResult.Text = 'AUC Results';
        
        % Clear table
        app.APTable.Data = {};
        app.APTable.ColumnName = {'Segment'};
        
        % Refresh the plot
        APWorkspaceDropDownValueChanged(app, event);
        end

        % Button pushed function: ExportCSVButton
        function ExportCSVButtonPushed(app, event)
        % Export AUC analysis results for all channels to CSV
    
        if isempty(app.APTable.Data)
            warndlg('No data available to export.', 'Export Warning');
            return;
        end
        
        try
            % Get the current workspace item name for use in the filename
            currentFileName = app.APWorkspaceDropDown.Value;
            if strcmp(currentFileName, 'No Data')
                currentFileName = 'PolysomeData';
            end
            
            % Get all analyzed channels
            channelFields = fieldnames(app.AUCValues);
            
            % Create a default filename with timestamp
            timestamp = datestr(now, 'yyyymmdd_HHMMSS');
            defaultFileName = [currentFileName, '_MultiChannel_Analysis_', timestamp, '.csv'];
            
            % Open save dialog
            [fileName, filePath] = uiputfile({'*.csv', 'CSV Files (*.csv)'}, ...
                'Save AUC Analysis Results', defaultFileName);
            
            % Check if user canceled the dialog
            if isequal(fileName, 0) || isequal(filePath, 0)
                return;
            end
            
            % Get full file path
            fullFilePath = fullfile(filePath, fileName);
            
            % Create a MATLAB table from the data
            columnNames = app.APTable.ColumnName;
            tableData = app.APTable.Data;
            
            % Convert cell array to table
            T = cell2table(tableData, 'VariableNames', columnNames);
            
            % Add metadata
            T.Properties.Description = 'Polysome Profile Multi-Channel AUC Analysis';
            T.Properties.UserData.SourceFile = currentFileName;
            T.Properties.UserData.AnalysisDate = timestamp;
            T.Properties.UserData.Channels = channelFields;
            
            % Write table to CSV file
            writetable(T, fullFilePath);
            
            % Add extra metadata to the file (at the top)
            fileID = fopen(fullFilePath, 'r');
            fileContents = fscanf(fileID, '%c', inf);
            fclose(fileID);
            
            % Build header
            header = sprintf(['# Polysome Profile Multi-Channel AUC Analysis\n', ...
                '# Source: %s\n', ...
                '# Date: %s\n'], ...
                currentFileName, datestr(now));
            
            % Add channel-specific information
            for i = 1:length(channelFields)
                fieldName = channelFields{i};
                
                if isfield(app.AUCValues, fieldName) && ~isempty(app.AUCValues.(fieldName))
                    if strcmp(fieldName, 'absorbance')
                        header = sprintf('%s# Absorbance Channel: %s\n', header, 'AbsA/Absorbance');
                        if isfield(app.AUCValues, fieldName)
                            header = sprintf('%s# Total Absorbance AUC: %.4f\n', header, sum(app.AUCValues.(fieldName)));
                        end
                    else
                        % For fluorescence channels
                        header = sprintf('%s# %s Fluorescence Channel\n', header, fieldName);
                        
                        % Add baseline correction info if it's a fluorescence channel
                        baselineStatus = 'Off';
                        if app.AllFluoroSwitch.Value == "On"
                            baselineStatus = 'On';
                        end
                        header = sprintf('%s#   Baseline Correction: %s\n', header, baselineStatus);
                        
                        if isfield(app.AUCValues, fieldName)
                            header = sprintf('%s#   Total AUC: %.4f\n', header, sum(app.AUCValues.(fieldName)));
                        end
                    end
                end
            end
            
            header = sprintf('%s\n', header);
            
            % Write the file back with header
            fileID = fopen(fullFilePath, 'w');
            fprintf(fileID, '%s%s', header, fileContents);
            fclose(fileID);
            
            % Show success message
            msgbox(sprintf('Multi-channel data successfully exported to: %s', fullFilePath), 'Export Complete');
        catch e
            errordlg(['Error exporting data: ', e.message], 'Export Error');
            disp(['Export error details: ' getReport(e)]);
        end
    
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIFigureMain and hide until all components are created
            app.UIFigureMain = uifigure('Visible', 'off');
            app.UIFigureMain.Color = [0.902 0.902 0.902];
            app.UIFigureMain.Position = [100 100 879 573];
            app.UIFigureMain.Name = 'MATLAB App';

            % Create TabGroup
            app.TabGroup = uitabgroup(app.UIFigureMain);
            app.TabGroup.Position = [1 1 879 573];

            % Create MainPanel
            app.MainPanel = uitab(app.TabGroup);
            app.MainPanel.Title = 'Main Panel';
            app.MainPanel.ButtonDownFcn = createCallbackFcn(app, @MainPanelButtonDown, true);

            % Create MainPanelPlot
            app.MainPanelPlot = uiaxes(app.MainPanel);
            title(app.MainPanelPlot, 'No Data')
            xlabel(app.MainPanelPlot, 'X')
            ylabel(app.MainPanelPlot, 'Y')
            zlabel(app.MainPanelPlot, 'Z')
            app.MainPanelPlot.Position = [21 19 838 411];

            % Create ChangeDirectoryButton
            app.ChangeDirectoryButton = uibutton(app.MainPanel, 'push');
            app.ChangeDirectoryButton.ButtonPushedFcn = createCallbackFcn(app, @ChangeDirectoryButtonPushed, true);
            app.ChangeDirectoryButton.Position = [15 511 108 22];
            app.ChangeDirectoryButton.Text = 'Change Directory';

            % Create MPDirectoryDropdown
            app.MPDirectoryDropdown = uidropdown(app.MainPanel);
            app.MPDirectoryDropdown.Items = {'No Data'};
            app.MPDirectoryDropdown.ValueChangedFcn = createCallbackFcn(app, @MPDirectoryDropdownValueChanged, true);
            app.MPDirectoryDropdown.BackgroundColor = [1 1 1];
            app.MPDirectoryDropdown.Position = [122 479 100 22];
            app.MPDirectoryDropdown.Value = 'No Data';

            % Create DirectoryFilesLabel
            app.DirectoryFilesLabel = uilabel(app.MainPanel);
            app.DirectoryFilesLabel.HorizontalAlignment = 'right';
            app.DirectoryFilesLabel.Position = [22 479 85 22];
            app.DirectoryFilesLabel.Text = 'Directory Files:';

            % Create ChannelLabel
            app.ChannelLabel = uilabel(app.MainPanel);
            app.ChannelLabel.HorizontalAlignment = 'right';
            app.ChannelLabel.Position = [47 449 60 22];
            app.ChannelLabel.Text = 'Channel:';

            % Create ChannelDropDown
            app.ChannelDropDown = uidropdown(app.MainPanel);
            app.ChannelDropDown.Items = {'No Data'};
            app.ChannelDropDown.ValueChangedFcn = createCallbackFcn(app, @ChannelDropDownValueChanged, true);
            app.ChannelDropDown.Position = [122 449 100 22];
            app.ChannelDropDown.Value = 'No Data';

            % Create MinEditFieldLabel
            app.MinEditFieldLabel = uilabel(app.MainPanel);
            app.MinEditFieldLabel.HorizontalAlignment = 'right';
            app.MinEditFieldLabel.Position = [779 509 25 22];
            app.MinEditFieldLabel.Text = 'Min';

            % Create MinEditField
            app.MinEditField = uieditfield(app.MainPanel, 'numeric');
            app.MinEditField.ValueChangedFcn = createCallbackFcn(app, @MinEditFieldValueChanged, true);
            app.MinEditField.Position = [826 509 36 22];

            % Create MaxEditFieldLabel
            app.MaxEditFieldLabel = uilabel(app.MainPanel);
            app.MaxEditFieldLabel.HorizontalAlignment = 'right';
            app.MaxEditFieldLabel.Position = [779 479 28 22];
            app.MaxEditFieldLabel.Text = 'Max';

            % Create MaxEditField
            app.MaxEditField = uieditfield(app.MainPanel, 'numeric');
            app.MaxEditField.ValueChangedFcn = createCallbackFcn(app, @MaxEditFieldValueChanged, true);
            app.MaxEditField.Position = [826 479 36 22];

            % Create LoadtoWorkspaceButton
            app.LoadtoWorkspaceButton = uibutton(app.MainPanel, 'push');
            app.LoadtoWorkspaceButton.ButtonPushedFcn = createCallbackFcn(app, @LoadtoWorkspaceButtonPushed, true);
            app.LoadtoWorkspaceButton.Position = [318 511 118 22];
            app.LoadtoWorkspaceButton.Text = 'Load to Workspace';

            % Create WorkspaceDropDownLabel
            app.WorkspaceDropDownLabel = uilabel(app.MainPanel);
            app.WorkspaceDropDownLabel.HorizontalAlignment = 'right';
            app.WorkspaceDropDownLabel.Position = [327 479 65 22];
            app.WorkspaceDropDownLabel.Text = 'Workspace';

            % Create WorkspaceDropDown
            app.WorkspaceDropDown = uidropdown(app.MainPanel);
            app.WorkspaceDropDown.Items = {'No Data'};
            app.WorkspaceDropDown.ValueChangedFcn = createCallbackFcn(app, @WorkspaceDropDownValueChanged, true);
            app.WorkspaceDropDown.Position = [407 479 100 22];
            app.WorkspaceDropDown.Value = 'No Data';

            % Create ClearfromWorkspaceButton
            app.ClearfromWorkspaceButton = uibutton(app.MainPanel, 'push');
            app.ClearfromWorkspaceButton.ButtonPushedFcn = createCallbackFcn(app, @ClearfromWorkspaceButtonPushed, true);
            app.ClearfromWorkspaceButton.Position = [318 449 133 22];
            app.ClearfromWorkspaceButton.Text = 'Clear from Workspace';

            % Create ClearWorkspaceButton
            app.ClearWorkspaceButton = uibutton(app.MainPanel, 'push');
            app.ClearWorkspaceButton.ButtonPushedFcn = createCallbackFcn(app, @ClearWorkspaceButtonPushed, true);
            app.ClearWorkspaceButton.Position = [460 449 106 22];
            app.ClearWorkspaceButton.Text = 'Clear Workspace';

            % Create AutoScaleLabel
            app.AutoScaleLabel = uilabel(app.MainPanel);
            app.AutoScaleLabel.HorizontalAlignment = 'center';
            app.AutoScaleLabel.Position = [626 478 63 22];
            app.AutoScaleLabel.Text = 'Auto Scale';

            % Create LoadfromWorkspaceButton
            app.LoadfromWorkspaceButton = uibutton(app.MainPanel, 'push');
            app.LoadfromWorkspaceButton.ButtonPushedFcn = createCallbackFcn(app, @LoadfromWorkspaceButtonPushed, true);
            app.LoadfromWorkspaceButton.Position = [460 511 132 22];
            app.LoadfromWorkspaceButton.Text = 'Load from Workspace';

            % Create AutoscaleSwitch
            app.AutoscaleSwitch = uiswitch(app.MainPanel, 'slider');
            app.AutoscaleSwitch.ValueChangedFcn = createCallbackFcn(app, @AutoscaleSwitchValueChanged, true);
            app.AutoscaleSwitch.Position = [635 510 45 20];
            app.AutoscaleSwitch.Value = 'On';

            % Create LoadAlltoWorkspaceButton
            app.LoadAlltoWorkspaceButton = uibutton(app.MainPanel, 'push');
            app.LoadAlltoWorkspaceButton.ButtonPushedFcn = createCallbackFcn(app, @LoadAlltoWorkspaceButtonPushed, true);
            app.LoadAlltoWorkspaceButton.Position = [131 511 134 22];
            app.LoadAlltoWorkspaceButton.Text = 'Load All to Workspace';

            % Create AutoLoadWorkspace
            app.AutoLoadWorkspace = uicheckbox(app.MainPanel);
            app.AutoLoadWorkspace.Text = 'Auto load';
            app.AutoLoadWorkspace.Position = [520 479 72 22];
            app.AutoLoadWorkspace.Value = true;

            % Create ColorPickerLabel
            app.ColorPickerLabel = uilabel(app.MainPanel);
            app.ColorPickerLabel.HorizontalAlignment = 'right';
            app.ColorPickerLabel.Position = [736 449 70 22];
            app.ColorPickerLabel.Text = 'Color Picker';

            % Create ColorPicker
            app.ColorPicker = uicolorpicker(app.MainPanel);
            app.ColorPicker.ValueChangedFcn = createCallbackFcn(app, @ColorPickerValueChanged, true);
            app.ColorPicker.Position = [821 449 38 22];

            % Create ComparisonPanel
            app.ComparisonPanel = uitab(app.TabGroup);
            app.ComparisonPanel.Title = 'Comparison Graphing';
            app.ComparisonPanel.ButtonDownFcn = createCallbackFcn(app, @ComparisonPanelButtonDown, true);

            % Create CompPlotPanel
            app.CompPlotPanel = uiaxes(app.ComparisonPanel);
            title(app.CompPlotPanel, 'No Data')
            xlabel(app.CompPlotPanel, 'X')
            ylabel(app.CompPlotPanel, 'Y')
            zlabel(app.CompPlotPanel, 'Z')
            app.CompPlotPanel.Position = [21 19 838 390];

            % Create ColorLabel
            app.ColorLabel = uilabel(app.ComparisonPanel);
            app.ColorLabel.HorizontalAlignment = 'right';
            app.ColorLabel.Position = [352 454 34 22];
            app.ColorLabel.Text = 'Color';

            % Create CompColorPicker
            app.CompColorPicker = uicolorpicker(app.ComparisonPanel);
            app.CompColorPicker.ValueChangedFcn = createCallbackFcn(app, @CompColorPickerValueChanged, true);
            app.CompColorPicker.Position = [393 453 38 22];

            % Create WorkspaceLabel
            app.WorkspaceLabel = uilabel(app.ComparisonPanel);
            app.WorkspaceLabel.HorizontalAlignment = 'right';
            app.WorkspaceLabel.Position = [1 521 68 22];
            app.WorkspaceLabel.Text = 'Workspace:';

            % Create CompListBox
            app.CompListBox = uilistbox(app.ComparisonPanel);
            app.CompListBox.Items = {'No Data'};
            app.CompListBox.Multiselect = 'on';
            app.CompListBox.ValueChangedFcn = createCallbackFcn(app, @CompListBoxClicked, true);
            app.CompListBox.ClickedFcn = createCallbackFcn(app, @CompListBoxClicked, true);
            app.CompListBox.Position = [86 429 267 113];
            app.CompListBox.Value = {'No Data'};

            % Create ChannelDropDown_2Label
            app.ChannelDropDown_2Label = uilabel(app.ComparisonPanel);
            app.ChannelDropDown_2Label.HorizontalAlignment = 'right';
            app.ChannelDropDown_2Label.Position = [362 520 60 22];
            app.ChannelDropDown_2Label.Text = 'Channel:';

            % Create CompChannelDropDown
            app.CompChannelDropDown = uidropdown(app.ComparisonPanel);
            app.CompChannelDropDown.Items = {'No Data'};
            app.CompChannelDropDown.Position = [437 520 100 22];
            app.CompChannelDropDown.Value = 'No Data';

            % Create PlotSelectedButton
            app.PlotSelectedButton = uibutton(app.ComparisonPanel, 'push');
            app.PlotSelectedButton.ButtonPushedFcn = createCallbackFcn(app, @PlotSelectedButtonPushed, true);
            app.PlotSelectedButton.Position = [437 488 100 22];
            app.PlotSelectedButton.Text = 'Plot Selected';

            % Create AutoScaleLabel_2
            app.AutoScaleLabel_2 = uilabel(app.ComparisonPanel);
            app.AutoScaleLabel_2.HorizontalAlignment = 'center';
            app.AutoScaleLabel_2.Position = [679 491 63 22];
            app.AutoScaleLabel_2.Text = 'Auto Scale';

            % Create AutoscaleSwitch_2
            app.AutoscaleSwitch_2 = uiswitch(app.ComparisonPanel, 'slider');
            app.AutoscaleSwitch_2.Position = [688 523 45 20];
            app.AutoscaleSwitch_2.Value = 'On';

            % Create Y2MinEditFieldLabel
            app.Y2MinEditFieldLabel = uilabel(app.ComparisonPanel);
            app.Y2MinEditFieldLabel.HorizontalAlignment = 'right';
            app.Y2MinEditFieldLabel.Position = [775 458 42 22];
            app.Y2MinEditFieldLabel.Text = 'Y2 Min';

            % Create Y2MinEditField
            app.Y2MinEditField = uieditfield(app.ComparisonPanel, 'numeric');
            app.Y2MinEditField.ValueChangedFcn = createCallbackFcn(app, @Y2MinEditFieldValueChanged, true);
            app.Y2MinEditField.Position = [823 458 36 22];

            % Create Y2MaxEditFieldLabel
            app.Y2MaxEditFieldLabel = uilabel(app.ComparisonPanel);
            app.Y2MaxEditFieldLabel.HorizontalAlignment = 'right';
            app.Y2MaxEditFieldLabel.Position = [737 429 80 22];
            app.Y2MaxEditFieldLabel.Text = 'Y2 Max';

            % Create Y2MaxEditField
            app.Y2MaxEditField = uieditfield(app.ComparisonPanel, 'numeric');
            app.Y2MaxEditField.ValueChangedFcn = createCallbackFcn(app, @Y2MaxEditFieldValueChanged, true);
            app.Y2MaxEditField.Position = [823 429 36 22];

            % Create Y1MinEditFieldLabel
            app.Y1MinEditFieldLabel = uilabel(app.ComparisonPanel);
            app.Y1MinEditFieldLabel.HorizontalAlignment = 'right';
            app.Y1MinEditFieldLabel.Position = [775 526 42 22];
            app.Y1MinEditFieldLabel.Text = 'Y1 Min';

            % Create Y1MinEditField
            app.Y1MinEditField = uieditfield(app.ComparisonPanel, 'numeric');
            app.Y1MinEditField.ValueChangedFcn = createCallbackFcn(app, @Y1MinEditFieldValueChanged, true);
            app.Y1MinEditField.Position = [823 526 36 22];

            % Create Y1MaxEditFieldLabel
            app.Y1MaxEditFieldLabel = uilabel(app.ComparisonPanel);
            app.Y1MaxEditFieldLabel.HorizontalAlignment = 'right';
            app.Y1MaxEditFieldLabel.Position = [737 496 80 22];
            app.Y1MaxEditFieldLabel.Text = 'Y1 Max';

            % Create Y1MaxEditField
            app.Y1MaxEditField = uieditfield(app.ComparisonPanel, 'numeric');
            app.Y1MaxEditField.ValueChangedFcn = createCallbackFcn(app, @Y1MaxEditFieldValueChanged, true);
            app.Y1MaxEditField.Position = [823 496 36 22];

            % Create ColorDropDown
            app.ColorDropDown = uidropdown(app.ComparisonPanel);
            app.ColorDropDown.Items = {'No Data'};
            app.ColorDropDown.Position = [437 453 211 22];
            app.ColorDropDown.Value = 'No Data';

            % Create CtrlclickLabel
            app.CtrlclickLabel = uilabel(app.ComparisonPanel);
            app.CtrlclickLabel.Position = [12 501 72 22];
            app.CtrlclickLabel.Text = '(Ctrl+click) >';

            % Create XMinLabel
            app.XMinLabel = uilabel(app.ComparisonPanel);
            app.XMinLabel.HorizontalAlignment = 'right';
            app.XMinLabel.Position = [387 420 36 22];
            app.XMinLabel.Text = 'X Min';

            % Create XMinEditField
            app.XMinEditField = uieditfield(app.ComparisonPanel, 'numeric');
            app.XMinEditField.ValueChangedFcn = createCallbackFcn(app, @XMinEditFieldValueChanged, true);
            app.XMinEditField.Position = [438 420 100 22];

            % Create AnalysisPanel
            app.AnalysisPanel = uitab(app.TabGroup);
            app.AnalysisPanel.Title = 'Trace Analysis';
            app.AnalysisPanel.ButtonDownFcn = createCallbackFcn(app, @AnalysisPanelButtonDown, true);

            % Create APPlot
            app.APPlot = uiaxes(app.AnalysisPanel);
            title(app.APPlot, 'No Data')
            xlabel(app.APPlot, 'X')
            ylabel(app.APPlot, 'Y')
            zlabel(app.APPlot, 'Z')
            app.APPlot.Position = [21 19 838 390];

            % Create WorkspaceDropDown_2Label
            app.WorkspaceDropDown_2Label = uilabel(app.AnalysisPanel);
            app.WorkspaceDropDown_2Label.HorizontalAlignment = 'right';
            app.WorkspaceDropDown_2Label.Position = [17 508 65 22];
            app.WorkspaceDropDown_2Label.Text = 'Workspace';

            % Create APWorkspaceDropDown
            app.APWorkspaceDropDown = uidropdown(app.AnalysisPanel);
            app.APWorkspaceDropDown.Items = {'No Data'};
            app.APWorkspaceDropDown.ValueChangedFcn = createCallbackFcn(app, @APWorkspaceDropDownValueChanged, true);
            app.APWorkspaceDropDown.Position = [97 508 100 22];
            app.APWorkspaceDropDown.Value = 'No Data';

            % Create ChannelDropDown_2Label_2
            app.ChannelDropDown_2Label_2 = uilabel(app.AnalysisPanel);
            app.ChannelDropDown_2Label_2.HorizontalAlignment = 'right';
            app.ChannelDropDown_2Label_2.Position = [23 470 60 22];
            app.ChannelDropDown_2Label_2.Text = 'Channel:';

            % Create ChannelDropDown_2
            app.ChannelDropDown_2 = uidropdown(app.AnalysisPanel);
            app.ChannelDropDown_2.Items = {'No Data'};
            app.ChannelDropDown_2.ValueChangedFcn = createCallbackFcn(app, @ChannelDropDown_2ValueChanged, true);
            app.ChannelDropDown_2.Position = [98 470 100 22];
            app.ChannelDropDown_2.Value = 'No Data';

            % Create SelectPoints
            app.SelectPoints = uibutton(app.AnalysisPanel, 'push');
            app.SelectPoints.ButtonPushedFcn = createCallbackFcn(app, @SelectPointsButtonPushed, true);
            app.SelectPoints.Position = [99 432 100 23];
            app.SelectPoints.Text = 'Select Points';

            % Create CalculateAUCButton
            app.CalculateAUCButton = uibutton(app.AnalysisPanel, 'push');
            app.CalculateAUCButton.ButtonPushedFcn = createCallbackFcn(app, @CalculateAUCButtonPushed, true);
            app.CalculateAUCButton.Position = [220 432 100 23];
            app.CalculateAUCButton.Text = 'Calculate AUC';

            % Create AUCResult
            app.AUCResult = uilabel(app.AnalysisPanel);
            app.AUCResult.Position = [336 432 366 22];
            app.AUCResult.Text = 'AUC Result';

            % Create ClearSelectionButton
            app.ClearSelectionButton = uibutton(app.AnalysisPanel, 'push');
            app.ClearSelectionButton.ButtonPushedFcn = createCallbackFcn(app, @ClearSelectionButtonPushed, true);
            app.ClearSelectionButton.Position = [221 473 100 23];
            app.ClearSelectionButton.Text = 'ClearSelection';

            % Create APTable
            app.APTable = uitable(app.AnalysisPanel);
            app.APTable.ColumnName = {'Column 1'; 'Column 2'; 'Column 3'; 'Column 4'};
            app.APTable.RowName = {};
            app.APTable.Position = [494 420 354 117];

            % Create ExportCSVButton
            app.ExportCSVButton = uibutton(app.AnalysisPanel, 'push');
            app.ExportCSVButton.ButtonPushedFcn = createCallbackFcn(app, @ExportCSVButtonPushed, true);
            app.ExportCSVButton.Position = [221 508 100 22];
            app.ExportCSVButton.Text = 'Export CSV';

            % Create AllFluoroSwitchLabel
            app.AllFluoroSwitchLabel = uilabel(app.AnalysisPanel);
            app.AllFluoroSwitchLabel.HorizontalAlignment = 'center';
            app.AllFluoroSwitchLabel.Position = [357 470 56 22];
            app.AllFluoroSwitchLabel.Text = 'All Fluoro';

            % Create AllFluoroSwitch
            app.AllFluoroSwitch = uiswitch(app.AnalysisPanel, 'slider');
            app.AllFluoroSwitch.Position = [362 507 45 20];

            % Show the figure after all components are created
            app.UIFigureMain.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = ProFileViewer_V5

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigureMain)

            % Execute the startup function
            runStartupFcn(app, @startupFcn)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigureMain)
        end
    end
end
